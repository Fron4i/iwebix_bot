from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Optional
from urllib.parse import quote

from services.cost_calculator_service import COST_TEMPLATES, MODULES, SUPPORT_PACKAGES

__all__ = [
    "get_template_keyboard",
    "get_modules_keyboard",
    "get_support_keyboard",
    "get_contact_keyboard",
    "get_simple_contact_keyboard",
    "get_category_keyboard",
]

# ---------------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã: 20000 -> 20 000
# ---------------------------------------------------------------------------


def _fmt_price(value: int) -> str:
    return f"{value:,}".replace(",", " ")


# –≠–º–æ–¥–∑–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω—ã –¥–æ —Ñ—É–Ω–∫—Ü–∏–π)
MODULE_EMOJIS = {
    "calendar": "üóìÔ∏è",
    "payments": "üí≥",
    "portfolio": "üñºÔ∏è",
    "mailing": "üìß",
    "loyalty": "üéÅ",
    "crm": "üìã",
    "documents": "üìÑ",
    "webapp": "üåê",
    "webapp_shop": "üõí",
    "quest": "üé≤",
    "admin_panel": "üõ†Ô∏è",
    "booking": "üìÜ",
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
TEMPLATE_EMOJIS = {
    "infobot": "ü§ñ",
    "tickets": "üéüÔ∏è",
    "schedule": "üìÜ",
    "courses": "üìö",
    "photo": "üì∑",
    "coursebot": "üéì",
    "shop": "üõí",
    "builder": "üß©",
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
SUPPORT_EMOJIS = {
    "no_support": "üö´",
    "support_6": "ÔøΩÔøΩÔ∏è",
    "support_12": "üõ°Ô∏è",
}


def get_category_keyboard() -> InlineKeyboardMarkup:
    categories = [
        ("all", "üóÇÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë"),
        ("builder", "üß© –°–æ–±—Ä–∞—Ç—å –ø–æ–º–æ–¥—É–ª—å–Ω–æ"),
        ("services", "üíº –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ (–≠–∫—Å–ø–µ—Ä—Ç)"),
        ("sales", "üõí –ü—Ä–æ–¥–∞–∂–∏ (–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫—É—Ä—Å—ã, —Ç–æ–≤–∞—Ä—ã)"),
    ]
    buttons = [[InlineKeyboardButton(text=label, callback_data=key)] for key, label in categories]
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    buttons.append([InlineKeyboardButton(text="‚ú® –•–æ—á—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", callback_data="unique_solution")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_template_keyboard(category: str) -> InlineKeyboardMarkup:
    from services.cost_calculator_service import COST_TEMPLATES  # local import to avoid cycles
    mapping = {
        "services": ["infobot", "photo", "schedule", "coursebot"],
        "sales": ["tickets", "courses", "shop"],
        "builder": list(COST_TEMPLATES.keys()),  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–±–µ—Ä—ë—Ç —Å–∞–º
        "all": list(COST_TEMPLATES.keys()),
    }
    keys = mapping.get(category, list(COST_TEMPLATES.keys()))
    keys_sorted = sorted(keys, key=lambda k: COST_TEMPLATES[k]["base_price"])
    buttons = []
    for k in keys_sorted:
        tpl = COST_TEMPLATES[k]
        emoji = TEMPLATE_EMOJIS.get(k, "üìÇ")
        text = f"{emoji} {tpl['name']} ‚Äî {_fmt_price(tpl['base_price'])} ‚ÇΩ"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"tpl_{k}")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_category")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_modules_keyboard(*, selected: List[str], template_key: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞."""
    tpl = COST_TEMPLATES.get(template_key, {})
    included = tpl.get("included", [])
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Ö–æ–¥—è—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è webapp / webapp_shop
    if template_key == "shop":
        # –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Å–∫—Ä—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π webapp, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∏—Ç—Ä–∏–Ω—É
        available_keys = [k for k in MODULES if k not in included and k != "webapp"]
    elif template_key == "infobot":
        allowed_set = {"calendar", "mailing", "webapp", "admin_panel", "booking"}
        available_keys = [k for k in MODULES if k in allowed_set and k not in included]
    else:
        # –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–∫—Ä—ã–≤–∞–µ–º –≤–∏—Ç—Ä–∏–Ω—É
        available_keys = [k for k in MODULES if k not in included and k != "webapp_shop"]

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
    available_keys = sorted(available_keys, key=lambda x: MODULES[x]["price"])

    keyboard = []
    for key in available_keys:
        module = MODULES[key]
        prefix = "‚úÖ " if key in selected else ""
        emoji = MODULE_EMOJIS.get(key, "üß©")
        price = module["price"]
        if template_key == "builder":
            price = ((int(price * 1.2 + 999)) // 1000) * 1000  # 20% –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –¥–æ 1000
        keyboard.append([
            InlineKeyboardButton(text=f"{prefix}{emoji} {module['name']} (+{_fmt_price(price)} ‚ÇΩ)", callback_data=key)
        ])

    keyboard.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_template"),
        InlineKeyboardButton(text="üëâ –î–∞–ª–µ–µ", callback_data="done_modules"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_support_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. ¬´–ë–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏¬ª –∏–¥—ë—Ç –ø–µ—Ä–≤–æ–π."""
    order = ["no_support", "support_6", "support_12"]
    inline = [
        [
            InlineKeyboardButton(
                text=f"{SUPPORT_EMOJIS.get(key, 'ü§ù')} {SUPPORT_PACKAGES[key]['name']} (+{_fmt_price(SUPPORT_PACKAGES[key]['price'])} ‚ÇΩ)",
                callback_data=key,
            )
        ]
        for key in order
    ]
    inline.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_modules")])
    return InlineKeyboardMarkup(inline_keyboard=inline)

def get_contact_keyboard(*, owner_username: str, template: str, included: str, modules: str, support_line: str, total: int, coupon_code: Optional[str] = None, discount: int = 0) -> InlineKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É ¬´–ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ¬ª —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞."""
    modules_text = modules or "-"
    lines = [
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!",
        "",
        "–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–∞:",
        "",
        f"–®–∞–±–ª–æ–Ω: {template}",
    ]
    if included:
        lines.extend(["(–≤—Ö–æ–¥–∏—Ç):", included])

    lines.extend([
        "",
        "–ú–æ–¥—É–ª–∏:",
        f"{modules_text}",
        "",
        support_line,
        "",
        f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total} ‚ÇΩ.",
    ])

    if coupon_code:
        lines.append(f"–ö—É–ø–æ–Ω: {coupon_code} (—Å–∫–∏–¥–∫–∞ ‚àí{discount} ‚ÇΩ)")

    lines.extend(["", "–•–æ—Ç–µ–ª–æ—Å—å –±—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞."])
    message = "\n".join(lines)
    url = f"https://t.me/{owner_username}?text=" + quote(message)
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ", url=url)],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu")],
        ]
    )

def get_simple_contact_keyboard(*, owner_username: str, coupon_code: Optional[str] = None) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ¬ª —Å –∫–æ—Ä–æ—Ç–∫–∏–º, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∫—É–ø–æ–Ω–æ–º."""
    lines = [
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!",
        "",
        "–•–æ—á—É –æ–±—Å—É–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–∞",
    ]
    if coupon_code:
        lines.append(f"–ö—É–ø–æ–Ω: {coupon_code}")
    message = "\n".join(lines)
    url = f"https://t.me/{owner_username}?text=" + quote(message)
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ", url=url)],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu")],
        ]
    ) 