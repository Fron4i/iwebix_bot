from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Optional
from urllib.parse import quote

from services.cost_calculator_service import COST_TEMPLATES, MODULES, SUPPORT_PACKAGES

__all__ = [
    "get_template_keyboard",
    "get_modules_keyboard",
    "get_support_keyboard",
    "get_contact_keyboard",
    "get_simple_contact_keyboard",
    "get_category_keyboard",
]

def get_category_keyboard() -> InlineKeyboardMarkup:
    categories = [
        ("services", "–£—Å–ª—É–≥–∏ / –ó–∞–ø–∏—Å—å"),
        ("courses", "–ò–Ω—Ñ–æ–ø—Ä–æ–¥—É–∫—Ç—ã / –ö—É—Ä—Å—ã"),
        ("shop", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω"),
        ("events", "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è / –ë–∏–ª–µ—Ç—ã"),
        ("all", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë"),
    ]
    buttons = [[InlineKeyboardButton(text=label, callback_data=key)] for key, label in categories]
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    buttons.append([InlineKeyboardButton(text="‚ú® –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", callback_data="unique_solution")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_template_keyboard(category: str) -> InlineKeyboardMarkup:
    from services.cost_calculator_service import COST_TEMPLATES  # local import to avoid cycles
    mapping = {
        "services": ["schedule", "photo"],
        "courses": ["courses"],
        "shop": ["shop"],
        "events": ["tickets"],
        "all": list(COST_TEMPLATES.keys()),
    }
    keys = mapping.get(category, list(COST_TEMPLATES.keys()))
    keys_sorted = sorted(keys, key=lambda k: COST_TEMPLATES[k]["base_price"])
    buttons = [
        [InlineKeyboardButton(text=f"{COST_TEMPLATES[k]['name']} ‚Äî {COST_TEMPLATES[k]['base_price']} ‚ÇΩ", callback_data=f"tpl_{k}")]
        for k in keys_sorted
    ]
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_category")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_modules_keyboard(*, selected: List[str], template_key: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞."""
    tpl = COST_TEMPLATES.get(template_key, {})
    included = tpl.get("included", [])
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Ö–æ–¥—è—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    available_keys = [k for k in MODULES if k not in included]

    keyboard = []
    for key in available_keys:
        module = MODULES[key]
        prefix = "‚úÖ " if key in selected else ""
        keyboard.append([
            InlineKeyboardButton(text=f"{prefix}{module['name']} (+{module['price']} ‚ÇΩ)", callback_data=key)
        ])

    keyboard.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_template"),
        InlineKeyboardButton(text="üëâ –î–∞–ª–µ–µ", callback_data="done_modules"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_support_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. ¬´–ë–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏¬ª –∏–¥—ë—Ç –ø–µ—Ä–≤–æ–π."""
    order = ["no_support", "support_6", "support_12"]
    inline = [
        [InlineKeyboardButton(text=f"{SUPPORT_PACKAGES[key]['name']} (+{SUPPORT_PACKAGES[key]['price']} ‚ÇΩ)", callback_data=key)]
        for key in order
    ]
    inline.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_modules")])
    return InlineKeyboardMarkup(inline_keyboard=inline)

def get_contact_keyboard(*, owner_username: str, template: str, included: str, modules: str, support_line: str, total: int, coupon_code: Optional[str] = None, discount: int = 0) -> InlineKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É ¬´–ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ¬ª —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞."""
    modules_text = modules or "-"
    lines = [
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!",
        "",
        "–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–∞:",
        "",
        f"–®–∞–±–ª–æ–Ω: {template}",
    ]
    if included:
        lines.extend(["(–≤—Ö–æ–¥–∏—Ç):", included])

    lines.extend([
        "",
        "–ú–æ–¥—É–ª–∏:",
        f"{modules_text}",
        "",
        support_line,
        "",
        f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total} ‚ÇΩ.",
    ])

    if coupon_code:
        lines.append(f"–ö—É–ø–æ–Ω: {coupon_code} (—Å–∫–∏–¥–∫–∞ ‚àí{discount} ‚ÇΩ)")

    lines.extend(["", "–•–æ—Ç–µ–ª–æ—Å—å –±—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞."])
    message = "\n".join(lines)
    url = f"https://t.me/{owner_username}?text=" + quote(message)
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ", url=url)],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu")],
        ]
    )

def get_simple_contact_keyboard(*, owner_username: str, coupon_code: Optional[str] = None) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ¬ª —Å –∫–æ—Ä–æ—Ç–∫–∏–º, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∫—É–ø–æ–Ω–æ–º."""
    lines = [
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!",
        "",
        "–•–æ—á—É –æ–±—Å—É–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–∞",
    ]
    if coupon_code:
        lines.append(f"–ö—É–ø–æ–Ω: {coupon_code}")
    message = "\n".join(lines)
    url = f"https://t.me/{owner_username}?text=" + quote(message)
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ", url=url)],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu")],
        ]
    ) 