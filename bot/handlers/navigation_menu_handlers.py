import logging
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from config import settings
from keyboards.navigation_menu_keyboard import get_navigation_menu
from keyboards.cost_calculator_keyboard import (
    get_template_keyboard,
    get_modules_keyboard,
    get_support_keyboard,
    get_contact_keyboard,
)
from states.cost_calculator_states import CostCalculatorStates as States
from services.cost_calculator_service import (
    COST_TEMPLATES,
    MODULES,
    SUPPORT_PACKAGES,
    calculate_total,
)

router = Router()

# ---------------------------------------------------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
# ---------------------------------------------------------------------------


BUTTON_TITLES = {
    "need_bot": "–∑–∞—á–µ–º –Ω—É–∂–µ–Ω –±–æ—Ç",
    "examples": "–ø—Ä–∏–º–µ—Ä—ã",
    "calc_cost": "—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å",
    "done_modules": "–¥–∞–ª–µ–µ (–º–æ–¥—É–ª–∏)",
    "support_6": "–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 6 –º–µ—Å.",
    "support_12": "–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 12 –º–µ—Å.",
    "no_support": "–±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
    "contact_me": "–Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ",
    # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ: —à–∞–±–ª–æ–Ω—ã –∏ –º–æ–¥—É–ª–∏
    "shop": "—à–∞–±–ª–æ–Ω –º–∞–≥–∞–∑–∏–Ω",
    "booking": "—à–∞–±–ª–æ–Ω –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "info": "—à–∞–±–ª–æ–Ω –∏–Ω—Ñ–æ-–±–æ—Ç",
    "payments": "–º–æ–¥—É–ª—å –æ–ø–ª–∞—Ç–∞",
    "admin": "–º–æ–¥—É–ª—å –∞–¥–º–∏–Ω",
    "multilang": "–º–æ–¥—É–ª—å –º—É–ª—å—Ç–∏—è–∑—ã–∫",
    "back_menu": "–≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é",
    "back_template": "–Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞",
    "back_modules": "–Ω–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º",
}


def log_button(callback: types.CallbackQuery, preview_text: str) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–µ—Ä–µ–Ω–æ—Å—ã."""
    username = f"@{callback.from_user.username}" if callback.from_user.username else callback.from_user.full_name
    title = BUTTON_TITLES.get(callback.data, callback.data)

    # –û—Å—Ç–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º 6 —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–≤—å—é
    lines = preview_text.split("\n")
    preview = "\n".join(lines[:10]).strip()

    logging.info("%s -> %s | %s", username, title, preview)


async def safe_edit(message: types.Message, *, text: str, reply_markup=None, parse_mode=None):
    """Edit message –∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞.

    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É ¬´message is not modified¬ª."""
    try:
        await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except TelegramBadRequest as exc:
        if "message is not modified" in str(exc):
            return  # –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
        raise

@router.callback_query(lambda c: c.data == "need_bot")
async def explain_need_bot(callback: types.CallbackQuery) -> None:
    content = (
        "Telegram-–±–æ—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏, –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥. "
        "–û–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã 24/7, –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—Ç—Å—è —Å CRM, ¬´1–°¬ª "
        "–∏ –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–æ–≤, –∫–æ–º–ø–∞–Ω–∏–∏ —Å–Ω–∏–∂–∞—é—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ "
        "–∏ –ø–æ–≤—ã—à–∞—é—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤."
    )
    await safe_edit(callback.message, text=content, reply_markup=get_navigation_menu())
    log_button(callback, content)
    await callback.answer()

@router.callback_query(lambda c: c.data == "examples")
async def show_examples(callback: types.CallbackQuery) -> None:
    text = (
        "–ù–∏–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–π –±–æ—Ç –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ "
        "–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å. –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å—Ä–∞–∑—É –ø–æ—è–≤—è—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π."
    )
    await safe_edit(callback.message, text=text)
    log_button(callback, text)
    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤–∏–¥–µ–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await callback.message.answer(
        "‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω-–±–æ—Ç ‚Äì t.me/example_shop_bot\n"
        "‚Ä¢ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì t.me/example_booking_bot\n",
    )
    await callback.message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=get_navigation_menu())
    await callback.answer()

@router.callback_query(lambda c: c.data == "calc_cost")
async def start_calculator(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(States.choose_template)
    await callback.message.edit_text(
        "–®–∞–≥ 1/3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –±–æ—Ç–∞:",
        reply_markup=get_template_keyboard(),
    )
    await callback.answer()
    log_button(callback, "–®–∞–≥ 1/3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –±–æ—Ç–∞:")

# ---------------------------------------------------------------------------
# Back navigation handlers
# ---------------------------------------------------------------------------


@router.callback_query(lambda c: c.data == "back_menu")
async def calc_back_menu(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await safe_edit(callback.message, text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=get_navigation_menu())
    log_button(callback, "–≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
    await callback.answer()


@router.callback_query(States.choose_modules, lambda c: c.data == "back_template")
async def back_to_template(callback: types.CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    await state.set_state(States.choose_template)
    await safe_edit(callback.message, text="–®–∞–≥ 1/3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –±–æ—Ç–∞:", reply_markup=get_template_keyboard())
    log_button(callback, "–Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞")
    await callback.answer()


@router.callback_query(States.choose_support, lambda c: c.data == "back_modules")
async def back_to_modules(callback: types.CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    selected = data.get("modules", [])
    await state.set_state(States.choose_modules)
    await safe_edit(callback.message, text="–®–∞–≥ 2/3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=get_modules_keyboard(selected=selected))
    log_button(callback, "–Ω–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º")
    await callback.answer()

@router.callback_query(States.choose_template)
async def template_chosen(callback: types.CallbackQuery, state: FSMContext) -> None:
    template_key = callback.data
    if template_key not in COST_TEMPLATES:
        await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", show_alert=True)
        return
    await state.update_data(template=template_key, modules=[])
    await state.set_state(States.choose_modules)
    tpl = COST_TEMPLATES[template_key]
    log_button(callback, f"üè∑Ô∏è –®–∞–±–ª–æ–Ω –≤—ã–±—Ä–∞–Ω: {tpl['name']} ‚Äî {tpl['base_price']} ‚ÇΩ")
    await callback.message.edit_text(
        "–®–∞–≥ 2/3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=get_modules_keyboard(selected=[]),
    )
    await callback.answer()

@router.callback_query(States.choose_modules)
async def modules_choose(callback: types.CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    selected = data.get("modules", [])

    if callback.data == "done_modules":
        await state.set_state(States.choose_support)
        await safe_edit(
            callback.message,
            text="–®–∞–≥ 3/3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
            reply_markup=get_support_keyboard(),
        )
        await callback.answer()
        log_button(callback, "–®–∞–≥ 3/3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")
        return
    if callback.data not in MODULES:
        await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", show_alert=True)
        return
    action = "–¥–æ–±–∞–≤–ª–µ–Ω"
    if callback.data in selected:
        selected.remove(callback.data)
        action = "—É–¥–∞–ª–µ–Ω"
    else:
        selected.append(callback.data)

    module = MODULES.get(callback.data)
    if module:
        sign = "‚ûï" if action == "–¥–æ–±–∞–≤–ª–µ–Ω" else "‚ûñ"
        log_button(callback, f"üîß {sign} {module['name']} ({module['price']} ‚ÇΩ)")
    await state.update_data(modules=selected)
    await callback.message.edit_reply_markup(reply_markup=get_modules_keyboard(selected=selected))
    await callback.answer()

@router.callback_query(States.choose_support)
async def support_chosen(callback: types.CallbackQuery, state: FSMContext) -> None:
    if callback.data not in SUPPORT_PACKAGES:
        await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", show_alert=True)
        return
    await state.update_data(support=callback.data)
    data = await state.get_data()
    total = calculate_total(
        template_key=data["template"],
        module_keys=data["modules"],
        support_key=data["support"],
    )
    template_key = data["template"]
    template = COST_TEMPLATES[template_key]
    template_line = f"–®–∞–±–ª–æ–Ω: {template['name']} ‚Äî {template['base_price']} ‚ÇΩ"

    if data["modules"]:
        modules_lines = [f"{MODULES[m]['name']} ‚Äî {MODULES[m]['price']} ‚ÇΩ" for m in data["modules"]]
        modules_block = "\n".join(modules_lines)
    else:
        modules_block = "-"

    support = SUPPORT_PACKAGES[data["support"]]
    support_line = f"–ü–∞–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {support['name']} (+{int(support['multiplier']*100)}%)"

    summary = (
        "–í–∞—à –≤—ã–±–æ—Ä:\n\n"
        f"{template_line}\n\n"
        f"–ú–æ–¥—É–ª–∏:\n{modules_block}\n\n"
        f"{support_line}\n\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: **{total} ‚ÇΩ**"
    )
    await safe_edit(
        callback.message,
        text=summary,
        parse_mode="Markdown",
        reply_markup=get_contact_keyboard(
            owner_username=settings.owner_username,
            template=template['name'],
            modules=modules_block.replace('\n', ', '),
            total=total,
        ),
    )
    await state.clear()
    await callback.answer()
    log_button(callback, summary)


@router.callback_query(lambda c: c.data == "contact_me")
async def contact_me(callback: types.CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–≤—Ç–æ—Ä–æ–º."""
    text = (
        "–û—Ç–ª–∏—á–Ω–æ! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ ‚Äì "
        f"https://t.me/{settings.owner_username}"
    )
    await safe_edit(callback.message, text=text, reply_markup=get_navigation_menu())
    log_button(callback, text)
    await callback.answer()