import logging
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import settings
from keyboards.navigation_menu_keyboard import get_navigation_menu
from keyboards.cost_calculator_keyboard import (
    get_template_keyboard,
    get_modules_keyboard,
    get_support_keyboard,
    get_contact_keyboard,
    get_simple_contact_keyboard,
)
from states.cost_calculator_states import CostCalculatorStates as States
from states.need_bot_game_states import NeedBotGameStates as NBStates
from services.cost_calculator_service import (
    COST_TEMPLATES,
    MODULES,
    SUPPORT_PACKAGES,
    calculate_total,
)

from database.user_repo import get_coupon, set_coupon

# –ò–∫–æ–Ω–∫–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π
MODULE_EMOJIS = {
    "payments": "üí≥",   # –û–ø–ª–∞—Ç–∞
    "admin": "üõ†Ô∏è",     # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    "multilang": "üåê",  # –ú—É–ª—å—Ç–∏—è–∑—ã–∫
}

router = Router()

# ---------------------------------------------------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
# ---------------------------------------------------------------------------


BUTTON_TITLES = {
    "need_bot": "–∑–∞—á–µ–º –Ω—É–∂–µ–Ω –±–æ—Ç",
    "examples": "–ø—Ä–∏–º–µ—Ä—ã",
    "calc_cost": "—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å",
    "done_modules": "–¥–∞–ª–µ–µ (–º–æ–¥—É–ª–∏)",
    "support_6": "–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 6 –º–µ—Å.",
    "support_12": "–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 12 –º–µ—Å.",
    "no_support": "–±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
    "contact_me": "–Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ",
    # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ: —à–∞–±–ª–æ–Ω—ã –∏ –º–æ–¥—É–ª–∏
    "schedule": "—à–∞–±–ª–æ–Ω –∑–∞–ø–∏—Å—å",
    "consult": "—à–∞–±–ª–æ–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
    "creative": "—à–∞–±–ª–æ–Ω —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è",
    "photo": "—à–∞–±–ª–æ–Ω —Ñ–æ—Ç–æ",
    "wellness": "—à–∞–±–ª–æ–Ω wellness",
    "calendar": "–º–æ–¥—É–ª—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
    "payments": "–º–æ–¥—É–ª—å –æ–ø–ª–∞—Ç–∞",
    "portfolio": "–º–æ–¥—É–ª—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
    "mailing": "–º–æ–¥—É–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏",
    "loyalty": "–º–æ–¥—É–ª—å –ª–æ—è–ª—å–Ω–æ—Å—Ç—å",
    "analytics": "–º–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
    "crm": "–º–æ–¥—É–ª—å CRM",
    "documents": "–º–æ–¥—É–ª—å –¥–æ–≥–æ–≤–æ—Ä—ã",
    "back_menu": "–≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é",
    "back_template": "–Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞",
    "back_modules": "–Ω–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º",
}


def log_button(callback: types.CallbackQuery, preview_text: str) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–µ—Ä–µ–Ω–æ—Å—ã."""
    username = f"@{callback.from_user.username}" if callback.from_user.username else callback.from_user.full_name
    title = BUTTON_TITLES.get(callback.data, callback.data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –ª–æ–≥–æ–≤ —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –Ω–µ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ—à–ª–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é.
    lines = preview_text.split("\n")
    preview_lines = []
    for line in lines:
        preview_lines.append(line)
        if "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å" in line:
            break  # –î–æ—à–ª–∏ –¥–æ —Ü–µ–Ω—ã ‚Äî –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
        if len(preview_lines) >= 25:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            break
    preview = "\n".join(preview_lines).strip()

    logging.info("%s -> %s | %s", username, title, preview)


async def safe_edit(message: types.Message, *, text: str, reply_markup=None, parse_mode=None):
    """Edit message –∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞.

    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É ¬´message is not modified¬ª."""
    try:
        await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except TelegramBadRequest as exc:
        if "message is not modified" in str(exc):
            return  # –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
        raise

# ---------------------------------------------------------------------------
# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ ¬´–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –±–æ—Ç?¬ª
# ---------------------------------------------------------------------------


QUESTIONS = [
    {
        "icon": "ü§ñ",
        "question": "–ó–∞—á–µ–º –º–Ω–µ –Ω—É–∂–µ–Ω –±–æ—Ç?",
        "options": [
            "–°—Ç–∞—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–º",
            "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏",
            "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É 24/7",
        ],
        "bullets": [
            "üí¨ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            "üõí —Å–æ–±–∏—Ä–∞—é—Ç –∑–∞—è–≤–∫–∏ –∏ —Å–æ–≤–µ—Ä—à–∞—é—Ç –ø—Ä–æ–¥–∞–∂–∏",
        ],
        "conclusion": "–ò —ç—Ç–æ –≤—Å—ë –ü–û–ö–ê –ª—é–¥–∏ –û–¢–î–´–•–ê–Æ–¢",
    },
    {
        "icon": "üéØ",
        "question": "–ö–æ–º—É –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –±–æ—Ç—ã?",
        "options": [
            "–≠–∫—Å–ø–µ—Ä—Ç–∞–º",
            "–û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞–º",
            "–ú–∞–ª–æ–º—É –±–∏–∑–Ω–µ—Å—É",
        ],
        "bullets": [
            "üè™ —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º –∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º",
            "üéì –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–∞–º",
            "üèãÔ∏è‚Äç‚ôÇÔ∏è —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞–º",
            "üçΩ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º –∏ –¥—Ä—É–≥–∏–º –æ—Ñ—Ñ–ª–∞–π–Ω –±–∏–∑–Ω–µ—Å–∞–º",
        ],
        "conclusion": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ª—é–±–æ–º—É –±–∏–∑–Ω–µ—Å—É —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º–∏",
    },
    {
        "icon": "‚öôÔ∏è",
        "question": "–ö–∞–∫ —É–ø—Ä–æ—â–∞—é—Ç –∑–∞–¥–∞—á–∏?",
        "options": [
            "–°–æ–±–∏—Ä–∞—é—Ç –ª–∏–¥—ã",
            "–°–µ–≥–º–µ–Ω—Ç–∏—Ä—É—é—Ç –∞—É–¥–∏—Ç–æ—Ä–∏—é",
            "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é—Ç –æ–ø–ª–∞—Ç—ã",
        ],
        "bullets": [
            "üì• —Å–æ–±–∏—Ä–∞—é—Ç –ª–∏–¥—ã",
            "üìä —Å–µ–≥–º–µ–Ω—Ç–∏—Ä—É—é—Ç –∞—É–¥–∏—Ç–æ—Ä–∏—é",
            "üí≥ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –æ–ø–ª–∞—Ç—ã –±–µ–∑ —É—á–∞—Å—Ç–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            "üòä –î–ï–õ–ê–Æ–¢ –í–ê–° –°–ß–ê–°–¢–õ–ò–í–´–ú–ò",
        ],
        "conclusion": "–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–µ–µ.",
    },
]


def build_options_keyboard(idx: int) -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text=opt, callback_data=f"nb_opt_{idx}")] for opt in QUESTIONS[idx]["options"]]
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu_from_needbot")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def build_after_answer_keyboard(idx: int) -> InlineKeyboardMarkup:
    kb = []
    if idx < len(QUESTIONS) - 1:
        kb.append([InlineKeyboardButton(text="üëâ –î–∞–ª–µ–µ", callback_data="nb_next")])
        kb.append([InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu_from_needbot")])
    else:
        kb.append([InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –∫—É–ø–æ–Ω 5%", callback_data="need_bot_coupon")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


@router.callback_query(lambda c: c.data == "need_bot")
async def need_bot_start(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(NBStates.question)
    await state.update_data(q_idx=0)
    idx = 0
    text = f"<b><i>{QUESTIONS[idx]['question']}</i></b>"
    await safe_edit(callback.message, text=text, reply_markup=build_options_keyboard(idx), parse_mode="HTML")
    log_button(callback, "need_bot_q0")
    await callback.answer()


@router.callback_query(NBStates.question, lambda c: c.data.startswith("nb_opt_"))
async def need_bot_handle_option(callback: types.CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    idx = data.get("q_idx", 0)
    # Build answer block
    q = QUESTIONS[idx]
    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤ + –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    lines = [f"{q['icon']} <b><i>{q['question']}</i></b>", ""]
    # —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–≤–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if idx == 0:
        lines.append("–ë–æ—Ç—ã –±–µ—Ä—É—Ç –Ω–∞ —Å–µ–±—è —Ä—É—Ç–∏–Ω—É:")
    # –ø—É–Ω–∫—Ç—ã –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫—É—Ä—Å–∏–≤–Ω—ã–µ
    bullet_lines = [f"<i>{b}</i>" for b in q["bullets"]]
    lines.extend(bullet_lines)
    lines.append("")
    # –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ –∫–æ–¥
    lines.append(f"<code>{q['conclusion']}</code>")
    answer_text = "\n".join(lines)
    await state.set_state(NBStates.answer)
    text = answer_text
    await safe_edit(callback.message, text=text, reply_markup=build_after_answer_keyboard(idx), parse_mode="HTML")
    log_button(callback, f"need_bot_answer_{idx}")
    await callback.answer()


@router.callback_query(NBStates.answer, lambda c: c.data == "nb_next")
async def need_bot_next_question(callback: types.CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    idx = data.get("q_idx", 0) + 1
    await state.update_data(q_idx=idx)
    await state.set_state(NBStates.question)
    text = f"<b><i>{QUESTIONS[idx]['question']}</i></b>"
    await safe_edit(callback.message, text=text, reply_markup=build_options_keyboard(idx), parse_mode="HTML")
    log_button(callback, f"need_bot_q{idx}")
    await callback.answer()


@router.callback_query(lambda c: c.data == "back_menu_from_needbot")
async def needbot_back_menu(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await safe_edit(callback.message, text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=get_navigation_menu(await get_coupon(callback.from_user.id)))
    log_button(callback, "needbot_back_menu")
    await callback.answer()


@router.callback_query(NBStates.answer, lambda c: c.data == "need_bot_coupon")
async def need_bot_coupon(callback: types.CallbackQuery, state: FSMContext) -> None:
    await set_coupon(callback.from_user.id, "BOT5")
    await state.clear()
    text = (
        "üéÅ –ö—É–ø–æ–Ω BOT5 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ 5%.\n\n"
    )
    await safe_edit(callback.message, text=text, reply_markup=get_navigation_menu(await get_coupon(callback.from_user.id)))
    log_button(callback, "need_bot_coupon")
    await callback.answer()

@router.callback_query(lambda c: c.data == "examples")
async def show_examples(callback: types.CallbackQuery) -> None:
    text = (
        "–ù–∏–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–π –±–æ—Ç –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ "
        "–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å. –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å—Ä–∞–∑—É –ø–æ—è–≤—è—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π."
    )
    await safe_edit(callback.message, text=text)
    log_button(callback, text)
    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤–∏–¥–µ–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await callback.message.answer(
        "‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω-–±–æ—Ç ‚Äì t.me/example_shop_bot\n"
        "‚Ä¢ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì t.me/example_booking_bot\n",
    )
    await callback.message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=get_navigation_menu(await get_coupon(callback.from_user.id)))
    await callback.answer()

@router.callback_query(lambda c: c.data == "calc_cost")
async def start_calculator(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(States.choose_template)
    await callback.message.edit_text(
        "–®–∞–≥ 1/3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –±–æ—Ç–∞:",
        reply_markup=get_template_keyboard(),
    )
    await callback.answer()
    log_button(callback, "–®–∞–≥ 1/3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –±–æ—Ç–∞:")

# ---------------------------------------------------------------------------
# Back navigation handlers
# ---------------------------------------------------------------------------


@router.callback_query(lambda c: c.data == "back_menu")
async def calc_back_menu(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await safe_edit(callback.message, text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=get_navigation_menu(await get_coupon(callback.from_user.id)))
    log_button(callback, "–≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
    await callback.answer()


@router.callback_query(States.choose_modules, lambda c: c.data == "back_template")
async def back_to_template(callback: types.CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    await state.set_state(States.choose_template)
    await safe_edit(callback.message, text="–®–∞–≥ 1/3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –±–æ—Ç–∞:", reply_markup=get_template_keyboard())
    log_button(callback, "–Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞")
    await callback.answer()


@router.callback_query(States.choose_support, lambda c: c.data == "back_modules")
async def back_to_modules(callback: types.CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    selected = data.get("modules", [])
    await state.set_state(States.choose_modules)
    await safe_edit(callback.message, text="–®–∞–≥ 2/3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=get_modules_keyboard(selected=selected))
    log_button(callback, "–Ω–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º")
    await callback.answer()

@router.callback_query(States.choose_template)
async def template_chosen(callback: types.CallbackQuery, state: FSMContext) -> None:
    template_key = callback.data
    if template_key not in COST_TEMPLATES:
        await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", show_alert=True)
        return
    await state.update_data(template=template_key, modules=[])
    await state.set_state(States.choose_modules)
    tpl = COST_TEMPLATES[template_key]
    log_button(callback, f"üè∑Ô∏è –®–∞–±–ª–æ–Ω –≤—ã–±—Ä–∞–Ω: {tpl['name']} ‚Äî {tpl['base_price']} ‚ÇΩ")
    await callback.message.edit_text(
        "–®–∞–≥ 2/3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=get_modules_keyboard(selected=[]),
    )
    await callback.answer()

@router.callback_query(States.choose_modules)
async def modules_choose(callback: types.CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    selected = data.get("modules", [])

    if callback.data == "done_modules":
        await state.set_state(States.choose_support)
        await safe_edit(
            callback.message,
            text="–®–∞–≥ 3/3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
            reply_markup=get_support_keyboard(),
        )
        await callback.answer()
        log_button(callback, "–®–∞–≥ 3/3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")
        return
    if callback.data not in MODULES:
        await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", show_alert=True)
        return
    action = "–¥–æ–±–∞–≤–ª–µ–Ω"
    if callback.data in selected:
        selected.remove(callback.data)
        action = "—É–¥–∞–ª–µ–Ω"
    else:
        selected.append(callback.data)

    module = MODULES.get(callback.data)
    if module:
        sign = "‚ûï" if action == "–¥–æ–±–∞–≤–ª–µ–Ω" else "‚ûñ"
        log_button(callback, f"üîß {sign} {module['name']} ({module['price']} ‚ÇΩ)")
    await state.update_data(modules=selected)
    await callback.message.edit_reply_markup(reply_markup=get_modules_keyboard(selected=selected))
    await callback.answer()

@router.callback_query(States.choose_support)
async def support_chosen(callback: types.CallbackQuery, state: FSMContext) -> None:
    if callback.data not in SUPPORT_PACKAGES:
        await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", show_alert=True)
        return
    await state.update_data(support=callback.data)
    data = await state.get_data()
    total = calculate_total(
        template_key=data["template"],
        module_keys=data["modules"],
        support_key=data["support"],
    )

    coupon_code = await get_coupon(callback.from_user.id)
    if coupon_code == "BOT5":
        discount = int(total * 0.05)
        total_after = total - discount
    else:
        discount = 0
        total_after = total

    template_key = data["template"]
    template = COST_TEMPLATES[template_key]
    template_line = f"üóÇÔ∏è –®–∞–±–ª–æ–Ω: {template['name']} ‚Äî {template['base_price']} ‚ÇΩ"

    if data["modules"]:
        modules_lines = [
            f"{MODULE_EMOJIS.get(m, 'üß©')} {MODULES[m]['name']} ‚Äî {MODULES[m]['price']} ‚ÇΩ" for m in data["modules"]
        ]
        modules_block = "\n".join(modules_lines)
    else:
        modules_block = "-"

    support = SUPPORT_PACKAGES[data["support"]]
    support_line = f"ü§ù –ü–∞–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {support['name']} (+{support['price']} ‚ÇΩ)"

    summary_lines = [
        "–í–∞—à –≤—ã–±–æ—Ä:",
        "",
        "",
        f"{template_line}",
        "",
        f"–ú–æ–¥—É–ª–∏:",
        f"{modules_block}",
        "",
        f"{support_line}",
    ]

    if discount:
        summary_lines.extend(["", f"–°–∫–∏–¥–∫–∞ –ø–æ –∫—É–ø–æ–Ω—É BOT5: -{discount} ‚ÇΩ"])

    summary_lines.extend(["", "", f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: *{total_after} ‚ÇΩ*"])

    summary = "\n".join(summary_lines)
    await safe_edit(
        callback.message,
        text=summary,
        parse_mode="Markdown",
        reply_markup=get_contact_keyboard(
            owner_username=settings.owner_username,
            template=f"{template['name']} ‚Äî {template['base_price']} ‚ÇΩ",
            modules=modules_block,
            total=total_after,
            coupon_code=coupon_code if discount else None,
            discount=discount,
        ),
    )
    await state.clear()
    await callback.answer()
    log_button(callback, summary)


@router.callback_query(lambda c: c.data == "contact_me")
async def contact_me(callback: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–≤—Ç–æ—Ä–æ–º —Å —É—á—ë—Ç–æ–º –∫—É–ø–æ–Ω–∞."""
    coupon_code = await get_coupon(callback.from_user.id)
    keyboard = get_simple_contact_keyboard(owner_username=settings.owner_username, coupon_code=coupon_code)
    await safe_edit(callback.message, text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º.", reply_markup=keyboard)
    log_button(callback, "contact_me")
    await callback.answer()